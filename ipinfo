#!/bin/bash
# Written by Marc MICHEL <marc _dot_  michel _at_ mailfence _dot_ com>
# This script is hereby put in the public domain.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#---------------------------------------
# checking if ip command is avaiable
#---------------------------------------
type ip >/dev/null 2>&1 || { echo -e >&2 "ipinfo require ip command but it's not installed.  Aborting."; exit 1; }
# check ip config
if [[ -z $(ip -4 r) ]]
then
    echo -e "\e[93m It seems you are not connected to any network."
    echo -e "\e[93m Check your connection or network interface status."
    exit
fi
#checking if jq and curl avaiable
geo=1
type curl >/dev/null 2>&1 || { echo -e >&2 " \e[93m ipinfo require curl to display public ip geolocalization."; geo=0; }
type jq >/dev/null 2>&1 || { echo -e >&2 "\e[93m ipinfo require jq to display public ip geolocalization."; geo=0; }
# checking if nmcli is avaiable
type nmcli >/dev/null 2>&1 || { echo -e >&2 "i\e[93m pinfo require nmcli to display wifi information."; wifi=0;}
if [[ $(nmcli -t  -f name  connection show --active) == '' ]] 
then
    wifi=0
else
    ssid=$(nmcli -t  -f all  connection show --active | grep wireless | cut -d':' -f1)
    bssid=$(nmcli -t -f in-use,bssid dev wifi list | grep '*'  | cut -d':' -f 2,3,4,5,6,7 | sed 's/[\]//g' )
    security=$(nmcli connection show  id $ssid | grep security.key-mgmt  |cut -d':' -f2 | sed -e 's/^[ \t]*//')
    channel=$(nmcli -t dev wifi list bssid $bssid | head -2 | cut -d':' -f10)
    rate=$(nmcli -t dev wifi list bssid $bssid | head -2 | cut -d':' -f11)
    signal=$(nmcli -t dev wifi list bssid $bssid | head -2 | cut -d':' -f12)
    type=$(nmcli -t dev wifi list bssid $bssid | head -2 | cut -d':' -f14)
    wifi=1
fi
#  get Interface infos
interface=$(ip -4 r | grep default | head -1 | cut -d' ' -f5)
isdhcp=$(ip -4 r | grep default | head -1 | cut -d' ' -f7)
macaddress=$(ip link show | grep -A 1  $interface | grep link/ether | head -1 | cut -d' ' -f6)
if [[ -z $macaddress ]]
then
    macaddress="Not available, using a Vpn ?"
fi
# get IP infos
iplocal=$(ip -4 a show $interface | grep inet | head -1 | cut -d' ' -f6)
broadcast=$(ip -4 a show $interface | grep inet | head -1 | cut -d' ' -f8)
gateway=$(ip -4 r | grep default | head -1 |cut -d' ' -f3)
dnsserver=$(grep "nameserver" /etc/resolv.conf | head -1 | cut -d' ' -f2)
#dnsserver=$(dig localhost | grep SERVER | cut -d' ' -f3 | cut -d'#' -f1)

# display infos
echo -e "\e[39m------------------------------------------"
echo "            Active Interface"
echo "------------------------------------------"
echo "Interface   :  $interface"
echo "Mac Address :  $macaddress "
echo "Mode        :  $isdhcp"
echo "------------------------------------------"
echo "               IP infos"
echo "------------------------------------------"
echo "Local IP    :  $iplocal"
echo "Broadcast   :  $broadcast"
echo "Gateway     :  $gateway"
echo "DNS Server  :  $dnsserver"
if [ $wifi -eq 1 ]
then
    echo "-----------------------------------------"
    echo "           Wifi information"
    echo "-----------------------------------------"
    echo "SSID     : $ssid"
    echo "TYPE     : $type"
    echo "BSSID    : $bssid"
    echo "SECURITY : $security"
    echo "CHANNEL  : $channel"
    echo "RATE     : $rate"
    echo "SIGNAL   : $signal"
fi
if [ $geo -eq 1 ]
then
    # get IP public info
    ippublic=$(curl -s ipinfo.io/ip)
    json_result=$(curl -s https://ipinfo.io/$ippublic/json)
    city=$(echo $json_result |  jq -r  '.city')
    region=$(echo $json_result |  jq -r '.region')
    country=$(echo $json_result |  jq -r '.country')
    zipcod=$(echo $json_result |  jq -r '.postal')
    timezone=$(echo $json_result |  jq -r '.timezone')
    echo "-----------------------------------------"
    echo "        Public IP Geolocalization"
    echo "-----------------------------------------"
    echo "Public IP   :  $ippublic"
    echo "City        :  $city"
    echo "Region      :  $region"
    echo "Country     :  $country"
    echo "Zip Code    :  $zipcod"
    echo "Timezone    :  $timezone"
    echo "-----------------------------------------"
    echo
fi
